#!/usr/bin/env ruby

require 'canister'
require 'ettin'
require 'keycard'
require 'kcv'

$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../lib")

module Chipmunk
  class << self
    def config
      @config ||= Ettin.for(Ettin.settings_files("config", ENV["RAILS_ENVIRONMENT"] || 'development'))
    end
  end

  # eager load
  config
end

require_relative '../config/initializers/services.rb'

Checkpoint::DB.initialize!

# should get this from the resolver
ROLES = %w(admin content_manager viewer)
# should get this from Package
CONTENT_TYPES = %w(audio video digital)

# Would like to grant without having a real user / loading all of Rails
# Might be helpful to have Checkpoint::Agent.from_token..?
class TokenUser < Checkpoint::Agent::Token
  alias agent_type type
  alias agent_id id
end

def grant
  (username, role, content_type) = ARGV
  check_usage(username, role, content_type)

  Services.checkpoint.grant!(agent_for(username),
                             credential_for(role),
                             resource_for(content_type))
end

def revoke
  (username, role, content_type) = ARGV
  check_usage(username, role, content_type)

  Services.checkpoint.revoke!(agent_for(username),
                             credential_for(role),
                             resource_for(content_type))
end

def agent_for(username)
  TokenUser.new("user",username)
end

def credential_for(role)
  Checkpoint::Credential::Role.new(role)
end

def resource_for(content_type)
  if CONTENT_TYPES.include?(content_type)
    resource = Checkpoint::Resource::AllOfType.new(content_type)
  elsif content_type == 'all'
    resource = Checkpoint::Resource::AllOfAnyType.new
  else
    usage("Unknown content type #{content_type}")
  end
end

def list
  grants = Checkpoint::DB[:grants].map do |grant|
     "#{grant[:agent_token]}\t#{grant[:credential_token]}\t#{grant[:resource_token]}"
  end

  puts grants.join("\n")
end

def check_usage(username, role, content_type)
  usage unless username && role && content_type
  usage("Username must be alphanumeric") unless username =~ /^\w+$/
  usage("Unknown role #{role}") unless ROLES.include?(role)
  usage("Unknown content type #{content_type}") unless CONTENT_TYPES.include?(content_type) || content_type == 'all'
end

def usage(message = nil)
  if(message)
    puts message, "\n"
  end
  puts "Manipulate grants for chipmunk"
  puts "Usage: #{$0} list | grant user role content_type | revoke user role content_type"
  puts
  puts "Roles: #{ROLES.join(" ")}"
  puts "Content types: #{ROLES.join(" ")} all"

  exit 1
end

def main
  action = ARGV.shift

  case action
  when 'list'
    list
  when 'grant'
    grant
  when 'revoke'
    revoke
  when 'help'
    usage
  else
    usage("Unknown action #{action}")
  end
end


main
